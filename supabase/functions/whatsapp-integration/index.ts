import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.51.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, data } = await req.json();

    switch (action) {
      case 'save_session':
        return await saveWhatsAppSession(data);
      case 'save_message':
        return await saveMessage(data);
      case 'get_session':
        return await getSession(data.phone_number);
      case 'check_booking_match':
        return await checkBookingMatch(data);
      case 'send_payment_request':
        return await sendPaymentRequest(data);
      case 'upload_payment_receipt':
        return await uploadPaymentReceipt(data);
      case 'confirm_payment':
        return await confirmPayment(data);
      case 'send_marketing_message':
        return await sendMarketingMessage(data);
      default:
        return new Response(JSON.stringify({ error: 'Unknown action' }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
    }
  } catch (error) {
    console.error('Error in whatsapp-integration:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å WhatsApp —Å–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π)
async function saveWhatsAppSession(data: any) {
  const { 
    phone_number, 
    session_stage = 'consultation',
    notes = null
  } = data;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
  const { data: existingSession } = await supabase
    .from('whatsapp_sessions')
    .select('*')
    .eq('phone_number', phone_number)
    .single();

  let sessionResult;
  
  if (existingSession) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    sessionResult = await supabase
      .from('whatsapp_sessions')
      .update({
        session_stage,
        last_interaction: new Date().toISOString(),
        notes: notes || existingSession.notes
      })
      .eq('id', existingSession.id)
      .select()
      .single();
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    sessionResult = await supabase
      .from('whatsapp_sessions')
      .insert({
        phone_number,
        session_stage,
        notes
      })
      .select()
      .single();
  }

  return new Response(JSON.stringify(sessionResult), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async function saveMessage(data: any) {
  const { session_id, message_type, content, is_from_client = true, ai_response = null } = data;

  const { data: message, error } = await supabase
    .from('whatsapp_messages')
    .insert({
      session_id,
      message_type,
      content,
      is_from_client,
      ai_response
    })
    .select()
    .single();

  if (error) throw error;

  return new Response(JSON.stringify({ success: true, message }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function getSession(phone_number: string) {
  const { data: session, error } = await supabase
    .from('whatsapp_sessions')
    .select('*')
    .eq('phone_number', phone_number)
    .single();

  if (error && error.code !== 'PGRST116') {
    throw error;
  }

  return new Response(JSON.stringify({ session }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å WhatsApp
async function checkBookingMatch(data: any) {
  const { booking_id } = data;

  // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { data: booking, error: bookingError } = await supabase
    .from('bookings')
    .select('*')
    .eq('id', booking_id)
    .single();

  if (bookingError) throw bookingError;

  // –ò—â–µ–º WhatsApp —Å–µ—Å—Å–∏—é —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const { data: session } = await supabase
    .from('whatsapp_sessions')
    .select('*')
    .eq('phone_number', booking.phone)
    .single();

  if (session) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é - —Å–≤—è–∑—ã–≤–∞–µ–º —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await supabase
      .from('whatsapp_sessions')
      .update({ 
        booking_id: booking.id,
        client_name: booking.name,
        email: booking.email,
        check_in_date: booking.check_in,
        check_out_date: booking.check_out,
        guests: booking.guests,
        accommodation_type: booking.accommodation_type,
        total_price: booking.total_price,
        session_stage: 'booking_confirmed'
      })
      .eq('id', session.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const message = `üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞!\n\n` +
      `üìã –î–µ—Ç–∞–ª–∏:\n` +
      `‚Ä¢ ${booking.accommodation_type}\n` +
      `‚Ä¢ ${booking.check_in} - ${booking.check_out}\n` +
      `‚Ä¢ ${booking.guests} –≥–æ—Å—Ç–µ–π\n` +
      `‚Ä¢ –°—É–º–º–∞: ${booking.total_price} ‚Ç∏\n\n` +
      `üí∞ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50% (${Math.round(booking.total_price * 0.5)} ‚Ç∏)\n\n` +
      `–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`;

    await fetch(`http://194.32.141.216:3003/send?to=${booking.phone}&text=${encodeURIComponent(message)}`);

    return new Response(JSON.stringify({ success: true, session_found: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }

  return new Response(JSON.stringify({ success: true, session_found: false }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
async function sendPaymentRequest(data: any) {
  const { booking_id } = data;

  // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { data: booking, error: bookingError } = await supabase
    .from('bookings')
    .select('*')
    .eq('id', booking_id)
    .single();

  if (bookingError) throw bookingError;

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
  const { data: session } = await supabase
    .from('whatsapp_sessions')
    .select('*')
    .eq('booking_id', booking_id)
    .single();

  if (!session) throw new Error('Session not found');

  // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
  const prepaymentAmount = Math.round(booking.total_price * 0.5);
  const paymentUrl = `https://pay.kaspi.kz/pay/vivoodtau?amount=${prepaymentAmount}&ref=${booking_id}`;

  const { data: paymentLink, error } = await supabase
    .from('payment_links')
    .insert({
      booking_id: booking.id,
      session_id: session.id,
      payment_url: paymentUrl,
      amount: prepaymentAmount,
      expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    })
    .select()
    .single();

  if (error) throw error;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
  const message = `üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã (${prepaymentAmount} ‚Ç∏):\n\n${paymentUrl}\n\n` +
    `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`;

  await fetch(`http://194.32.141.216:3003/send?to=${booking.phone}&text=${encodeURIComponent(message)}`);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é —Å–µ—Å—Å–∏–∏
  await supabase
    .from('whatsapp_sessions')
    .update({ session_stage: 'payment_pending' })
    .eq('id', session.id);

  return new Response(JSON.stringify({ success: true, payment_link: paymentLink }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã
async function uploadPaymentReceipt(data: any) {
  const { session_id, receipt_url } = data;

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
  const { data: session } = await supabase
    .from('whatsapp_sessions')
    .select('*')
    .eq('id', session_id)
    .single();

  if (!session) throw new Error('Session not found');

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å —á–µ–∫–æ–º
  await supabase
    .from('payment_links')
    .update({
      payment_screenshot: receipt_url,
      status: 'receipt_uploaded'
    })
    .eq('session_id', session_id);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é —Å–µ—Å—Å–∏–∏
  await supabase
    .from('whatsapp_sessions')
    .update({ session_stage: 'payment_verification' })
    .eq('id', session_id);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  const message = `‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;
  await fetch(`http://194.32.141.216:3003/send?to=${session.phone_number}&text=${encodeURIComponent(message)}`);

  return new Response(JSON.stringify({ success: true }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
async function confirmPayment(data: any) {
  const { payment_link_id, verified_by } = data;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
  const { data: paymentLink, error } = await supabase
    .from('payment_links')
    .update({
      status: 'verified',
      verified_at: new Date().toISOString(),
      verified_by
    })
    .eq('id', payment_link_id)
    .select()
    .single();

  if (error) throw error;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (paymentLink.booking_id) {
    await supabase
      .from('bookings')
      .update({ status: 'confirmed' })
      .eq('id', paymentLink.booking_id);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é —Å–µ—Å—Å–∏–∏
  await supabase
    .from('whatsapp_sessions')
    .update({ session_stage: 'payment_confirmed' })
    .eq('session_id', paymentLink.session_id);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const { data: booking } = await supabase
    .from('bookings')
    .select('*')
    .eq('id', paymentLink.booking_id)
    .single();

  if (booking) {
    const message = `üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n` +
      `‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:\n` +
      `‚Ä¢ ${booking.accommodation_type}\n` +
      `‚Ä¢ ${booking.check_in} - ${booking.check_out}\n` +
      `‚Ä¢ ${booking.guests} –≥–æ—Å—Ç–µ–π\n\n` +
      `–ú—ã –∂–¥–µ–º –≤–∞—Å! –ü—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏ –¥–æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É: ${booking.total_price - paymentLink.amount} ‚Ç∏`;

    await fetch(`http://194.32.141.216:3003/send?to=${booking.phone}&text=${encodeURIComponent(message)}`);
  }

  return new Response(JSON.stringify({ success: true, verified: true }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendMarketingMessage(data: any) {
  const { campaign_id, phone_number, message } = data;

  // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
  const { data: session } = await supabase
    .from('whatsapp_sessions')
    .select('id')
    .eq('phone_number', phone_number)
    .single();

  if (session) {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await supabase
      .from('marketing_messages')
      .insert({
        campaign_id,
        session_id: session.id
      });
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp API
  const whatsappResponse = await fetch(`http://194.32.141.216:3003/send?to=${phone_number}&text=${encodeURIComponent(message)}`);

  return new Response(JSON.stringify({ success: true, sent: whatsappResponse.ok }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}